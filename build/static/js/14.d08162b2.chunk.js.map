{"version":3,"sources":["utils/contractHelpers.ts","hooks/useGetWalletNfts.ts","views/Nft/components/HowItWorks.tsx","views/Nft/components/InfoRow.tsx","views/Nft/components/Image.tsx","views/Nft/contexts/NftProvider.tsx","views/Nft/components/TransferNftModal.tsx","views/Nft/components/NftCard/index.tsx","views/Nft/components/NftGrid.tsx","views/Nft/components/NftList.tsx","views/Nft/index.tsx"],"names":["getPancakeRabbitContract","getContract","pancakeRabbitsAbi","getPancakeRabbitsAddress","getRabbitMintingContract","rabbitMintingFarmAbi","getRabbitMintingFarmAddress","pancakeRabbitsContract","initialState","isLoading","nfts","reducer","state","action","type","data","useGetWalletNfts","useReducer","dispatch","account","useWallet","useEffect","a","methods","balanceOf","call","getTokenIdAndBunnyId","index","tokenOfOwnerByIndex","getBunnyId","tokenURI","tokenId","makeBatchRequest","bunnyId","tokenUri","Number","tokenIdPromises","i","push","Promise","all","tokenIdsOwnedByWallet","reduce","accum","association","tokenIds","fetchNfts","StyledHowItWorks","styled","div","theme","colors","textSubtle","Section","Icon","Text","UIKitText","Row","HowItWorks","TranslateString","useI18n","id","color","size","mb","as","href","target","rel","InfoRow","Container","borderColor","StyledImage","img","Image","src","alt","originalLink","previewImage","rabbitMintingFarmAddress","NftProviderContext","createContext","NftProvider","children","isMounted","useRef","useState","isInitialized","hasClaimed","startBlockNumber","endBlockNumber","setState","currentBlock","useBlock","nftList","multicall","rabbitmintingfarm","address","name","startBlockNumberArr","endBlockNumberArr","prevState","toNumber","console","error","fetchContractData","params","hasClaimedArr","current","canBurnNft","Provider","value","getTokenIds","reInitialize","Value","ModalContent","Actions","Label","label","text","TransferNftModal","nft","onSuccess","onDismiss","setIsLoading","setValue","setError","usePancakeRabbits","handleConfirm","Web3","utils","isAddress","transferFrom","send","from","on","title","htmlFor","placeholder","onChange","evt","inputValue","isWarning","disabled","fullWidth","variant","onClick","Header","DetailsButton","Button","attrs","InfoBlock","NftCard","isOpen","setIsOpen","useContext","profile","useProfile","images","description","walletOwnsNft","length","ChevronUpIcon","ChevronDownIcon","handleClick","useModal","onPresentTransferModal","isActive","lg","ipfs","outline","mt","p","endIcon","width","style","textAlign","NftGrid","BaseLayout","mediaQueries","sm","NftList","orderBy","map","StyledHero","Nft","Page"],"mappings":"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","file":"static/js/14.d08162b2.chunk.js","sourcesContent":["import { getPancakeProfileAddress, getPancakeRabbitsAddress, getRabbitMintingFarmAddress } from 'utils/addressHelpers'\r\nimport { getContract } from 'utils/web3'\r\nimport profileABI from 'config/abi/pancakeProfile.json'\r\nimport pancakeRabbitsAbi from 'config/abi/pancakeRabbits.json'\r\nimport rabbitMintingFarmAbi from 'config/abi/rabbitmintingfarm.json'\r\n\r\nexport const getProfileContract = () => {\r\n  return getContract(profileABI, getPancakeProfileAddress())\r\n}\r\n\r\nexport const getPancakeRabbitContract = () => {\r\n  return getContract(pancakeRabbitsAbi, getPancakeRabbitsAddress())\r\n}\r\n\r\nexport const getRabbitMintingContract = () => {\r\n  return getContract(rabbitMintingFarmAbi, getRabbitMintingFarmAddress())\r\n}\r\n\r\nexport default null\r\n","import { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport { useEffect, useReducer } from 'react'\r\nimport { getPancakeRabbitContract } from 'utils/contractHelpers'\r\nimport makeBatchRequest from 'utils/makeBatchRequest'\r\n\r\nconst pancakeRabbitsContract = getPancakeRabbitContract()\r\n\r\nexport type NftMap = {\r\n  [key: number]: {\r\n    tokenUri: string\r\n    tokenIds: number[]\r\n  }\r\n}\r\n\r\ntype Action = { type: 'set_nfts'; data: NftMap } | { type: 'reset' }\r\n\r\ntype State = {\r\n  isLoading: boolean\r\n  nfts: NftMap\r\n}\r\n\r\nconst initialState: State = {\r\n  isLoading: true,\r\n  nfts: {},\r\n}\r\n\r\nconst reducer = (state: State, action: Action) => {\r\n  switch (action.type) {\r\n    case 'set_nfts':\r\n      return {\r\n        ...initialState,\r\n        isLoading: false,\r\n        nfts: action.data,\r\n      }\r\n    case 'reset':\r\n      return {\r\n        ...initialState,\r\n        isLoading: false,\r\n      }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nconst useGetWalletNfts = () => {\r\n  const [state, dispatch] = useReducer(reducer, initialState)\r\n  const { account } = useWallet()\r\n\r\n  useEffect(() => {\r\n    const fetchNfts = async () => {\r\n      try {\r\n        const balanceOf = await pancakeRabbitsContract.methods.balanceOf(account).call()\r\n\r\n        if (balanceOf > 0) {\r\n          let nfts: NftMap = {}\r\n\r\n          const getTokenIdAndBunnyId = async (index: number) => {\r\n            try {\r\n              const { tokenOfOwnerByIndex, getBunnyId, tokenURI } = pancakeRabbitsContract.methods\r\n              const tokenId = await tokenOfOwnerByIndex(account, index).call()\r\n              const [bunnyId, tokenUri] = await makeBatchRequest([getBunnyId(tokenId).call, tokenURI(tokenId).call])\r\n\r\n              return [Number(bunnyId), Number(tokenId), tokenUri]\r\n            } catch (error) {\r\n              return null\r\n            }\r\n          }\r\n\r\n          const tokenIdPromises = []\r\n\r\n          for (let i = 0; i < balanceOf; i++) {\r\n            tokenIdPromises.push(getTokenIdAndBunnyId(i))\r\n          }\r\n\r\n          const tokenIdsOwnedByWallet = await Promise.all(tokenIdPromises)\r\n\r\n          nfts = tokenIdsOwnedByWallet.reduce((accum, association) => {\r\n            if (!association) {\r\n              return accum\r\n            }\r\n\r\n            const [bunnyId, tokenId, tokenUri] = association\r\n\r\n            return {\r\n              ...accum,\r\n              [bunnyId]: {\r\n                tokenUri,\r\n                tokenIds: accum[bunnyId] ? [...accum[bunnyId].tokenIds, tokenId] : [tokenId],\r\n              },\r\n            }\r\n          }, {})\r\n\r\n          dispatch({ type: 'set_nfts', data: nfts })\r\n        } else {\r\n          // Reset it in case of wallet change\r\n          dispatch({ type: 'reset' })\r\n        }\r\n      } catch (error) {\r\n        dispatch({ type: 'reset' })\r\n      }\r\n    }\r\n\r\n    if (account) {\r\n      fetchNfts()\r\n    }\r\n  }, [account, dispatch])\r\n\r\n  return state\r\n}\r\n\r\nexport default useGetWalletNfts\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Button, Heading, Text as UIKitText, ArrowForwardIcon } from '@pancakeswap-libs/uikit'\r\nimport useI18n from 'hooks/useI18n'\r\n\r\nconst StyledHowItWorks = styled.div`\r\n  border-top: 1px solid ${({ theme }) => theme.colors.textSubtle};\r\n  padding: 24px 0;\r\n`\r\n\r\nconst Section = styled.div`\r\n  margin-bottom: 24px;\r\n`\r\n\r\nconst Icon = styled.div`\r\n  text-align: center;\r\n`\r\n\r\nconst Text = styled(UIKitText)`\r\n  flex: 1;\r\n  padding: 0 8px;\r\n`\r\n\r\nconst Row = styled.div`\r\n  align-items: start;\r\n  display: flex;\r\n  margin-bottom: 16px;\r\n`\r\n\r\nconst HowItWorks = () => {\r\n  const TranslateString = useI18n()\r\n\r\n  return (\r\n    <StyledHowItWorks>\r\n      <Section>\r\n        <Heading id=\"how-it-works\" color=\"secondary\" size=\"lg\" mb=\"16px\">\r\n          {TranslateString(632, 'How it works')}\r\n        </Heading>\r\n        <Row>\r\n          <Icon>\r\n            <ArrowForwardIcon />\r\n          </Icon>\r\n          <Text>\r\n            {TranslateString(634, 'Winners will be able to claim an NFT on this page once the claiming period starts.')}\r\n          </Text>\r\n        </Row>\r\n        <Row>\r\n          <Icon>\r\n            <ArrowForwardIcon />\r\n          </Icon>\r\n          <Text>\r\n            {TranslateString(636, 'If you’re not selected, you won’t be able to claim. Better luck next time!')}\r\n          </Text>\r\n        </Row>\r\n        <Row>\r\n          <Icon>\r\n            <ArrowForwardIcon />\r\n          </Icon>\r\n          <Text>\r\n            {TranslateString(\r\n              638,\r\n              \"Winners can trade in their NFTs for a CAKE value until the expiry date written below. If you don't trade in your NFT by then, don’t worry: you’ll still keep it in your wallet!\",\r\n            )}\r\n          </Text>\r\n        </Row>\r\n      </Section>\r\n      <Section>\r\n        <Heading color=\"secondary\" size=\"lg\" mb=\"16px\">\r\n          {TranslateString(640, 'How are winners selected?')}\r\n        </Heading>\r\n        <Row>\r\n          <Icon>\r\n            <ArrowForwardIcon />\r\n          </Icon>\r\n          <Text>{TranslateString(642, 'Winners are selected at random! Good luck!')}</Text>\r\n        </Row>\r\n      </Section>\r\n      <div>\r\n        <Button\r\n          as=\"a\"\r\n          href=\"https://docs.google.com/forms/d/e/1FAIpQLSfToBNlovtMvTZFSwOhk0TBiDPMGasLxqG0RB-kJN85HR_avA/viewform\"\r\n          target=\"_blank\"\r\n          rel=\"noopener noreferrer\"\r\n        >\r\n          {TranslateString(644, 'Register for a chance to win')}\r\n        </Button>\r\n      </div>\r\n    </StyledHowItWorks>\r\n  )\r\n}\r\n\r\nexport default HowItWorks\r\n","import styled from 'styled-components'\r\n\r\nconst InfoRow = styled.div`\r\n  align-items: center;\r\n  display: flex;\r\n  justify-content: space-between;\r\n`\r\n\r\nexport default InfoRow\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\n\r\ninterface ImageProps {\r\n  src: string\r\n  alt: string\r\n  originalLink?: string\r\n}\r\n\r\nconst Container = styled.div`\r\n  background-color: ${({ theme }) => theme.colors.borderColor};\r\n  position: relative;\r\n  width: 100%;\r\n  overflow: hidden;\r\n  padding-bottom: 100%;\r\n`\r\n\r\nconst StyledImage = styled.img`\r\n  position: absolute;\r\n  width: 100%;\r\n  top: 0;\r\n  left: 0;\r\n  transition: opacity 1s linear;\r\n  height: 100%;\r\n  object-fit: cover;\r\n  border-radius: 32px 32px 0 0;\r\n`\r\n\r\nconst Image: React.FC<ImageProps> = ({ src, alt, originalLink }) => {\r\n  const previewImage = <StyledImage src={src} alt={alt} />\r\n\r\n  return (\r\n    <Container>\r\n      {originalLink ? (\r\n        <a href={originalLink} target=\"_blank\" rel=\"noreferrer noopener\">\r\n          {previewImage}\r\n        </a>\r\n      ) : (\r\n        previewImage\r\n      )}\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default Image\r\n","import React, { createContext, useEffect, useRef, useState } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport useBlock from 'hooks/useBlock'\r\nimport useGetWalletNfts, { NftMap } from 'hooks/useGetWalletNfts'\r\nimport { getRabbitMintingFarmAddress } from 'utils/addressHelpers'\r\nimport { getPancakeRabbitContract } from 'utils/contractHelpers'\r\nimport multicall from 'utils/multicall'\r\nimport rabbitmintingfarm from 'config/abi/rabbitmintingfarm.json'\r\n\r\nconst rabbitMintingFarmAddress = getRabbitMintingFarmAddress()\r\n\r\ntype State = {\r\n  isInitialized: boolean\r\n  hasClaimed: boolean\r\n  endBlockNumber: number\r\n  startBlockNumber: number\r\n  balanceOf: number\r\n}\r\n\r\ntype Context = {\r\n  nfts: NftMap\r\n  canBurnNft: boolean\r\n  getTokenIds: (bunnyId: number) => number[]\r\n  reInitialize: () => void\r\n} & State\r\n\r\nexport const NftProviderContext = createContext<Context | null>(null)\r\n\r\nconst NftProvider: React.FC = ({ children }) => {\r\n  const isMounted = useRef(true)\r\n  const [state, setState] = useState<State>({\r\n    isInitialized: false,\r\n    hasClaimed: false,\r\n    startBlockNumber: 0,\r\n    endBlockNumber: 0,\r\n    balanceOf: 0,\r\n  })\r\n  const { account } = useWallet()\r\n  const currentBlock = useBlock()\r\n  const { nfts: nftList } = useGetWalletNfts()\r\n  const { isInitialized } = state\r\n\r\n  // Static data\r\n  useEffect(() => {\r\n    const fetchContractData = async () => {\r\n      try {\r\n        const [startBlockNumberArr, endBlockNumberArr] = await multicall(rabbitmintingfarm, [\r\n          { address: rabbitMintingFarmAddress, name: 'startBlockNumber' },\r\n          { address: rabbitMintingFarmAddress, name: 'endBlockNumber' },\r\n        ])\r\n\r\n        // TODO: Figure out why these are coming back as arrays\r\n        const [startBlockNumber]: [BigNumber] = startBlockNumberArr\r\n        const [endBlockNumber]: [BigNumber] = endBlockNumberArr\r\n\r\n        setState((prevState) => ({\r\n          ...prevState,\r\n          isInitialized: true,\r\n          startBlockNumber: startBlockNumber.toNumber(),\r\n          endBlockNumber: endBlockNumber.toNumber(),\r\n        }))\r\n      } catch (error) {\r\n        console.error('an error occured', error)\r\n      }\r\n    }\r\n\r\n    fetchContractData()\r\n  }, [isInitialized, setState])\r\n\r\n  // Data from the contract that needs an account\r\n  useEffect(() => {\r\n    const fetchContractData = async () => {\r\n      try {\r\n        const pancakeRabbitsContract = getPancakeRabbitContract()\r\n        const [hasClaimedArr] = await multicall(rabbitmintingfarm, [\r\n          { address: rabbitMintingFarmAddress, name: 'hasClaimed', params: [account] },\r\n        ])\r\n        const balanceOf = await pancakeRabbitsContract.methods.balanceOf(account).call()\r\n        const [hasClaimed]: [boolean] = hasClaimedArr\r\n\r\n        setState((prevState) => ({\r\n          ...prevState,\r\n          isInitialized: true,\r\n          hasClaimed,\r\n          balanceOf,\r\n        }))\r\n      } catch (error) {\r\n        console.error('an error occured', error)\r\n      }\r\n    }\r\n\r\n    if (account) {\r\n      fetchContractData()\r\n    }\r\n  }, [isInitialized, account, setState])\r\n\r\n  useEffect(() => {\r\n    return () => {\r\n      isMounted.current = false\r\n    }\r\n  }, [isMounted])\r\n\r\n  const canBurnNft = currentBlock <= state.endBlockNumber\r\n  const getTokenIds = (bunnyId: number) => nftList[bunnyId]?.tokenIds\r\n\r\n  /**\r\n   * Allows consumers to re-fetch all data from the contract. Triggers the effects.\r\n   * For example when a transaction has been completed\r\n   */\r\n  const reInitialize = () => {\r\n    // Only attempt to re-initialize if the component is still mounted\r\n    // Transactions can take awhile so it is likely some users will navigate to another page\r\n    // before the transaction is finished\r\n    if (isMounted.current) {\r\n      setState((prevState) => ({ ...prevState, isInitialized: false }))\r\n    }\r\n  }\r\n\r\n  return (\r\n    <NftProviderContext.Provider value={{ ...state, nfts: nftList, canBurnNft, getTokenIds, reInitialize }}>\r\n      {children}\r\n    </NftProviderContext.Provider>\r\n  )\r\n}\r\n\r\nexport default NftProvider\r\n","import React, { useState } from 'react'\r\nimport styled from 'styled-components'\r\nimport Web3 from 'web3'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport { Button, Input, Modal, Text } from '@pancakeswap-libs/uikit'\r\nimport { Nft } from 'config/constants/types'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { usePancakeRabbits } from 'hooks/useContract'\r\nimport InfoRow from './InfoRow'\r\n\r\ninterface TransferNftModalProps {\r\n  nft: Nft\r\n  tokenIds: number[]\r\n  onSuccess: () => any\r\n  onDismiss?: () => void\r\n}\r\n\r\nconst Value = styled(Text)`\r\n  font-weight: 600;\r\n`\r\n\r\nconst ModalContent = styled.div`\r\n  margin-bottom: 16px;\r\n`\r\n\r\nconst Actions = styled.div`\r\n  display: grid;\r\n  grid-template-columns: repeat(2, 1fr);\r\n  grid-gap: 8px;\r\n`\r\n\r\nconst Label = styled.label`\r\n  color: ${({ theme }) => theme.colors.text};\r\n  display: block;\r\n  margin-bottom: 8px;\r\n  margin-top: 24px;\r\n`\r\n\r\nconst TransferNftModal: React.FC<TransferNftModalProps> = ({ nft, tokenIds, onSuccess, onDismiss }) => {\r\n  const [isLoading, setIsLoading] = useState(false)\r\n  const [value, setValue] = useState('')\r\n  const [error, setError] = useState(null)\r\n  const TranslateString = useI18n()\r\n  const { account } = useWallet()\r\n  const pancakeRabbitsContract = usePancakeRabbits()\r\n\r\n  const handleConfirm = async () => {\r\n    try {\r\n      const isValidAddress = Web3.utils.isAddress(value)\r\n\r\n      if (!isValidAddress) {\r\n        setError(TranslateString(999, 'Please enter a valid wallet address'))\r\n      } else {\r\n        await pancakeRabbitsContract.methods\r\n          .transferFrom(account, value, tokenIds[0])\r\n          .send({ from: account })\r\n          .on('sending', () => {\r\n            setIsLoading(true)\r\n          })\r\n          .on('receipt', () => {\r\n            onDismiss()\r\n            onSuccess()\r\n          })\r\n          .on('error', () => {\r\n            console.error(error)\r\n            setError('Unable to transfer NFT')\r\n            setIsLoading(false)\r\n          })\r\n      }\r\n    } catch (err) {\r\n      console.error('Unable to transfer NFT:', err)\r\n    }\r\n  }\r\n\r\n  const handleChange = (evt: React.ChangeEvent<HTMLInputElement>) => {\r\n    const { value: inputValue } = evt.target\r\n    setValue(inputValue)\r\n  }\r\n\r\n  return (\r\n    <Modal title={TranslateString(999, 'Transfer NFT')} onDismiss={onDismiss}>\r\n      <ModalContent>\r\n        {error && (\r\n          <Text color=\"failure\" mb=\"8px\">\r\n            {error}\r\n          </Text>\r\n        )}\r\n        <InfoRow>\r\n          <Text>{TranslateString(999, 'Transferring')}:</Text>\r\n          <Value>{`1x \"${nft.name}\" NFT`}</Value>\r\n        </InfoRow>\r\n        <Label htmlFor=\"transferAddress\">{TranslateString(999, 'Receiving address')}:</Label>\r\n        <Input\r\n          id=\"transferAddress\"\r\n          name=\"address\"\r\n          type=\"text\"\r\n          placeholder={TranslateString(999, 'Paste address')}\r\n          value={value}\r\n          onChange={handleChange}\r\n          isWarning={error}\r\n          disabled={isLoading}\r\n        />\r\n      </ModalContent>\r\n      <Actions>\r\n        <Button fullWidth variant=\"secondary\" onClick={onDismiss}>\r\n          {TranslateString(462, 'Cancel')}\r\n        </Button>\r\n        <Button fullWidth onClick={handleConfirm} disabled={!account || isLoading || !value}>\r\n          {TranslateString(464, 'Confirm')}\r\n        </Button>\r\n      </Actions>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default TransferNftModal\r\n","import React, { useState, useContext } from 'react'\r\nimport styled from 'styled-components'\r\nimport {\r\n  Card,\r\n  CardBody,\r\n  Heading,\r\n  Tag,\r\n  Button,\r\n  ChevronUpIcon,\r\n  ChevronDownIcon,\r\n  Text,\r\n  CardFooter,\r\n  useModal,\r\n} from '@pancakeswap-libs/uikit'\r\nimport { useProfile } from 'state/hooks'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { Nft } from 'config/constants/types'\r\nimport InfoRow from '../InfoRow'\r\nimport Image from '../Image'\r\nimport { NftProviderContext } from '../../contexts/NftProvider'\r\nimport TransferNftModal from '../TransferNftModal'\r\n\r\ninterface NftCardProps {\r\n  nft: Nft\r\n}\r\n\r\nconst Header = styled(InfoRow)`\r\n  min-height: 28px;\r\n`\r\n\r\nconst DetailsButton = styled(Button).attrs({ variant: 'text', fullWidth: true })`\r\n  height: auto;\r\n  padding: 16px 24px;\r\n\r\n  &:hover:not(:disabled):not(:active) {\r\n    background-color: transparent;\r\n  }\r\n\r\n  &:focus:not(:active) {\r\n    box-shadow: none;\r\n  }\r\n`\r\n\r\nconst InfoBlock = styled.div`\r\n  padding: 24px;\r\n`\r\n\r\nconst NftCard: React.FC<NftCardProps> = ({ nft }) => {\r\n  const [isOpen, setIsOpen] = useState(false)\r\n  const TranslateString = useI18n()\r\n  const { isInitialized, getTokenIds, reInitialize } = useContext(NftProviderContext)\r\n  const { profile } = useProfile()\r\n  const { bunnyId, name, images, description } = nft\r\n  const tokenIds = getTokenIds(bunnyId)\r\n  const walletOwnsNft = tokenIds && tokenIds.length > 0\r\n  const Icon = isOpen ? ChevronUpIcon : ChevronDownIcon\r\n\r\n  const handleClick = async () => {\r\n    setIsOpen(!isOpen)\r\n  }\r\n\r\n  const handleSuccess = () => {\r\n    reInitialize()\r\n  }\r\n\r\n  const [onPresentTransferModal] = useModal(\r\n    <TransferNftModal nft={nft} tokenIds={tokenIds} onSuccess={handleSuccess} />,\r\n  )\r\n\r\n  return (\r\n    <Card isActive={walletOwnsNft}>\r\n      <Image src={`/images/nfts/${images.lg}`} alt={name} originalLink={walletOwnsNft ? images.ipfs : null} />\r\n      <CardBody>\r\n        <Header>\r\n          <Heading>{name}</Heading>\r\n          {isInitialized && tokenIds && (\r\n            <Tag outline variant=\"secondary\">\r\n              {TranslateString(999, 'In Wallet')}\r\n            </Tag>\r\n          )}\r\n          {profile?.nft?.bunnyId === bunnyId && (\r\n            <Tag outline variant=\"success\">\r\n              {TranslateString(999, 'Profile Pic')}\r\n            </Tag>\r\n          )}\r\n        </Header>\r\n        {isInitialized && walletOwnsNft && (\r\n          <Button fullWidth variant=\"secondary\" mt=\"24px\" onClick={onPresentTransferModal}>\r\n            {TranslateString(999, 'Transfer')}\r\n          </Button>\r\n        )}\r\n      </CardBody>\r\n      <CardFooter p=\"0\">\r\n        <DetailsButton endIcon={<Icon width=\"24px\" color=\"primary\" />} onClick={handleClick}>\r\n          {TranslateString(999, 'Details')}\r\n        </DetailsButton>\r\n        {isOpen && (\r\n          <InfoBlock>\r\n            <Text as=\"p\" color=\"textSubtle\" style={{ textAlign: 'center' }}>\r\n              {description}\r\n            </Text>\r\n          </InfoBlock>\r\n        )}\r\n      </CardFooter>\r\n    </Card>\r\n  )\r\n}\r\n\r\nexport default NftCard\r\n","import styled from 'styled-components'\r\nimport { BaseLayout } from '@pancakeswap-libs/uikit'\r\n\r\nconst NftGrid = styled(BaseLayout)`\r\n  padding-bottom: 24px;\r\n  padding-top: 24px;\r\n\r\n  & > div {\r\n    grid-column: 2 / 6;\r\n\r\n    ${({ theme }) => theme.mediaQueries.sm} {\r\n      grid-column: span 4;\r\n    }\r\n  }\r\n`\r\n\r\nexport default NftGrid\r\n","import React from 'react'\r\nimport orderBy from 'lodash/orderBy'\r\nimport nfts from 'config/constants/nfts'\r\nimport NftCard from './NftCard'\r\nimport NftGrid from './NftGrid'\r\n\r\nconst NftList = () => {\r\n  return (\r\n    <NftGrid>\r\n      {orderBy(nfts, 'sortOrder').map((nft) => (\r\n        <div key={nft.name}>\r\n          <NftCard nft={nft} />\r\n        </div>\r\n      ))}\r\n    </NftGrid>\r\n  )\r\n}\r\n\r\nexport default NftList\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Heading } from '@pancakeswap-libs/uikit'\r\nimport useI18n from 'hooks/useI18n'\r\nimport Page from 'components/layout/Page'\r\nimport HowItWorks from './components/HowItWorks'\r\nimport NftList from './components/NftList'\r\nimport NftProvider from './contexts/NftProvider'\r\n\r\nconst StyledHero = styled.div`\r\n  border-bottom: 1px solid ${({ theme }) => theme.colors.textSubtle};\r\n  margin-bottom: 24px;\r\n  padding-bottom: 32px;\r\n`\r\n\r\nconst Nft = () => {\r\n  const TranslateString = useI18n()\r\n\r\n  return (\r\n    <NftProvider>\r\n      <Page>\r\n        <StyledHero>\r\n          <Heading as=\"h1\" size=\"xxl\" color=\"secondary\" mb=\"24px\">\r\n            NFTs\r\n          </Heading>\r\n          <Heading as=\"h2\" size=\"lg\" color=\"secondary\">\r\n            {TranslateString(999, 'Trade in for CAKE, or keep for your collection!')}\r\n          </Heading>\r\n        </StyledHero>\r\n        <NftList />\r\n        <HowItWorks />\r\n      </Page>\r\n    </NftProvider>\r\n  )\r\n}\r\n\r\nexport default Nft\r\n"],"sourceRoot":""}