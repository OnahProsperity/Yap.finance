{"version":3,"sources":["hooks/useFarmsWithBalance.ts","hooks/useAllEarnings.ts","views/Home/components/CardValue.tsx","views/Home/components/CakeHarvestBalance.tsx","views/Home/components/CakeWalletBalance.tsx","views/Home/components/FarmStakingCard.tsx","views/Home/components/CakeWinnings.tsx","views/Home/components/LotteryJackpot.tsx","views/Home/components/LotteryCard.tsx","views/Home/components/CakeStats.tsx","views/Home/components/TotalValueLockedCard.tsx","hooks/api.ts","views/Home/components/EarnAPYCard.tsx","views/Home/components/EarnAssetCard.tsx","hooks/useLotteryTotalPrizesUsd.ts","views/Home/components/WinCard.tsx","views/Home/Home.tsx"],"names":["useFarmsWithBalance","useState","farmsWithBalances","setFarmsWithBalances","account","useWallet","fastRefresh","useRefresh","useEffect","a","calls","farmsConfig","map","farm","address","getMasterChefAddress","name","params","pid","multicall","masterChefABI","rawResults","results","index","balance","BigNumber","fetchBalances","useAllEarnings","balances","setBalance","res","fetchAllBalances","CardValue","value","decimals","fontSize","useCountUp","start","end","duration","separator","undefined","countUp","update","updateValue","useRef","current","bold","CakeHarvestBalance","TranslateString","useI18n","earningsSum","reduce","accum","earning","div","pow","toNumber","color","style","lineHeight","CakeWalletBalance","cakeBalance","useTokenBalance","getCakeAddress","getBalanceNumber","StyledFarmStakingCard","styled","Card","Block","CardImage","img","Label","theme","colors","textSubtle","Actions","FarmedStakingCard","pendingTx","setPendingTx","balancesWithValue","filter","balanceType","onReward","useAllHarvest","farmWithBalance","harvestAllFarms","useCallback","size","mb","src","alt","width","height","id","disabled","length","onClick","fullWidth","UnlockButton","CakeWinnings","claimAmount","useTotalClaim","LotteryJackpot","lotteryPrizeAmount","useTotalRewards","toLocaleString","maximumFractionDigits","StyledLotteryCard","lotteryHasDrawn","useGetLotteryHasDrawn","requesteClaim","setRequestedClaim","onMultiClaim","useMultiClaimLottery","handleClaim","console","error","useModal","max","tokenName","onPresentBuy","marginRight","variant","StyledCakeStats","Row","CakeStats","totalSupply","useTotalSupply","burnedBalance","useBurnedBalance","cakeSupply","StyledTotalValueLockedCard","TotalValueLockedCard","data","setData","fetch","response","json","responsedata","fetchData","useGetStats","tvl","total_value_locked_all","mediaQueries","lg","CardMidContent","Heading","attrs","EarnAPYCard","farmsLP","useFarms","bnbPrice","usePriceBnbBusd","maxAPY","Number","MIN_VALUE","getHighestAPY","activeFarms","multiplier","calculateAPY","slice","farmsToDisplay","cakePriceVsBNB","find","CAKE_POOL_PID","tokenPriceVsQuote","tokenAmount","lpTotalInQuoteToken","cakeRewardPerBlock","CAKE_PER_BLOCK","times","poolWeight","cakeRewardPerYear","BLOCKS_PER_YEAR","apy","quoteTokenSymbol","QuoteToken","BUSD","CAKE","dual","cakeApy","dualApy","rewardPerBlock","plus","animation","justifyContent","exact","activeClassName","to","mt","EarnAssetCard","latestPools","orderBy","pools","assets","pool","join","useLotteryTotalPrizesUsd","totalRewards","usePriceCakeBusd","WinCard","lotteryPrize","Math","round","Hero","Cards","BaseLayout","sm","CTACards","Home","Page","as","FarmStakingCard","LotteryCard"],"mappings":"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","file":"static/js/18.27f99c8b.chunk.js","sourcesContent":["import { useEffect, useState } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport multicall from 'utils/multicall'\r\nimport { getMasterChefAddress } from 'utils/addressHelpers'\r\nimport masterChefABI from 'config/abi/masterchef.json'\r\nimport { farmsConfig } from 'config/constants'\r\nimport { FarmConfig } from 'config/constants/types'\r\nimport useRefresh from './useRefresh'\r\n\r\nexport interface FarmWithBalance extends FarmConfig {\r\n  balance: BigNumber\r\n}\r\n\r\nconst useFarmsWithBalance = () => {\r\n  const [farmsWithBalances, setFarmsWithBalances] = useState<FarmWithBalance[]>([])\r\n  const { account } = useWallet()\r\n  const { fastRefresh } = useRefresh()\r\n\r\n  useEffect(() => {\r\n    const fetchBalances = async () => {\r\n      const calls = farmsConfig.map((farm) => ({\r\n        address: getMasterChefAddress(),\r\n        name: 'pendingCake',\r\n        params: [farm.pid, account],\r\n      }))\r\n\r\n      const rawResults = await multicall(masterChefABI, calls)\r\n      const results = farmsConfig.map((farm, index) => ({ ...farm, balance: new BigNumber(rawResults[index]) }))\r\n\r\n      setFarmsWithBalances(results)\r\n    }\r\n\r\n    if (account) {\r\n      fetchBalances()\r\n    }\r\n  }, [account, fastRefresh])\r\n\r\n  return farmsWithBalances\r\n}\r\n\r\nexport default useFarmsWithBalance\r\n","import { useEffect, useState } from 'react'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport multicall from 'utils/multicall'\r\nimport { getMasterChefAddress } from 'utils/addressHelpers'\r\nimport masterChefABI from 'config/abi/masterchef.json'\r\nimport { farmsConfig } from 'config/constants'\r\nimport useRefresh from './useRefresh'\r\n\r\nconst useAllEarnings = () => {\r\n  const [balances, setBalance] = useState([])\r\n  const { account }: { account: string } = useWallet()\r\n  const { fastRefresh } = useRefresh()\r\n\r\n  useEffect(() => {\r\n    const fetchAllBalances = async () => {\r\n      const calls = farmsConfig.map((farm) => ({\r\n        address: getMasterChefAddress(),\r\n        name: 'pendingCake',\r\n        params: [farm.pid, account],\r\n      }))\r\n\r\n      const res = await multicall(masterChefABI, calls)\r\n\r\n      setBalance(res)\r\n    }\r\n\r\n    if (account) {\r\n      fetchAllBalances()\r\n    }\r\n  }, [account, fastRefresh])\r\n\r\n  return balances\r\n}\r\n\r\nexport default useAllEarnings\r\n","import React, { useEffect, useRef } from 'react'\r\nimport { useCountUp } from 'react-countup'\r\nimport { Text } from '@pancakeswap-libs/uikit'\r\n\r\ninterface CardValueProps {\r\n  value: number\r\n  decimals?: number\r\n  fontSize?: string\r\n}\r\n\r\nconst CardValue: React.FC<CardValueProps> = ({ value, decimals, fontSize = '40px' }) => {\r\n  const { countUp, update } = useCountUp({\r\n    start: 0,\r\n    end: value,\r\n    duration: 1,\r\n    separator: ',',\r\n    decimals:\r\n      // eslint-disable-next-line no-nested-ternary\r\n      decimals !== undefined ? decimals : value < 0 ? 4 : value > 1e5 ? 0 : 3,\r\n  })\r\n\r\n  const updateValue = useRef(update)\r\n\r\n  useEffect(() => {\r\n    updateValue.current(value)\r\n  }, [value, updateValue])\r\n\r\n  return (\r\n    <Text bold fontSize={fontSize}>\r\n      {countUp}\r\n    </Text>\r\n  )\r\n}\r\n\r\nexport default CardValue\r\n","import React from 'react'\r\nimport { Text } from '@pancakeswap-libs/uikit'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport BigNumber from 'bignumber.js'\r\nimport useI18n from 'hooks/useI18n'\r\nimport useAllEarnings from 'hooks/useAllEarnings'\r\nimport CardValue from './CardValue'\r\n\r\nconst CakeHarvestBalance = () => {\r\n  const TranslateString = useI18n()\r\n  const { account } = useWallet()\r\n  const allEarnings = useAllEarnings()\r\n  const earningsSum = allEarnings.reduce((accum, earning) => {\r\n    return accum + new BigNumber(earning).div(new BigNumber(10).pow(18)).toNumber()\r\n  }, 0)\r\n\r\n  if (!account) {\r\n    return (\r\n      <Text color=\"textDisabled\" style={{ lineHeight: '60px' }}>\r\n        {TranslateString(298, 'Locked')}\r\n      </Text>\r\n    )\r\n  }\r\n\r\n  return <CardValue value={earningsSum} />\r\n}\r\n\r\nexport default CakeHarvestBalance\r\n","import React from 'react'\r\nimport { Text } from '@pancakeswap-libs/uikit'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport useTokenBalance from 'hooks/useTokenBalance'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { getCakeAddress } from 'utils/addressHelpers'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport CardValue from './CardValue'\r\n\r\nconst CakeWalletBalance = () => {\r\n  const TranslateString = useI18n()\r\n  const cakeBalance = useTokenBalance(getCakeAddress())\r\n  const { account } = useWallet()\r\n\r\n  if (!account) {\r\n    return (\r\n      <Text color=\"textDisabled\" style={{ lineHeight: '36px' }}>\r\n        {TranslateString(298, 'Locked')}\r\n      </Text>\r\n    )\r\n  }\r\n\r\n  return <CardValue value={getBalanceNumber(cakeBalance)} fontSize=\"24px\" />\r\n}\r\n\r\nexport default CakeWalletBalance\r\n","import React, { useState, useCallback } from 'react'\r\nimport styled from 'styled-components'\r\nimport { Heading, Card, CardBody, Button } from '@pancakeswap-libs/uikit'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { useAllHarvest } from 'hooks/useHarvest'\r\nimport useFarmsWithBalance from 'hooks/useFarmsWithBalance'\r\nimport UnlockButton from 'components/UnlockButton'\r\nimport CakeHarvestBalance from './CakeHarvestBalance'\r\nimport CakeWalletBalance from './CakeWalletBalance'\r\n\r\nconst StyledFarmStakingCard = styled(Card)`\r\n  background-image: url('/images/cake-bg.svg');\r\n  background-repeat: no-repeat;\r\n  background-position: top right;\r\n  min-height: 376px;\r\n`\r\n\r\nconst Block = styled.div`\r\n  margin-bottom: 16px;\r\n`\r\n\r\nconst CardImage = styled.img`\r\n  margin-bottom: 16px;\r\n`\r\n\r\nconst Label = styled.div`\r\n  color: ${({ theme }) => theme.colors.textSubtle};\r\n  font-size: 14px;\r\n`\r\n\r\nconst Actions = styled.div`\r\n  margin-top: 24px;\r\n`\r\n\r\nconst FarmedStakingCard = () => {\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const { account } = useWallet()\r\n  const TranslateString = useI18n()\r\n  const farmsWithBalance = useFarmsWithBalance()\r\n  const balancesWithValue = farmsWithBalance.filter((balanceType) => balanceType.balance.toNumber() > 0)\r\n\r\n  const { onReward } = useAllHarvest(balancesWithValue.map((farmWithBalance) => farmWithBalance.pid))\r\n\r\n  const harvestAllFarms = useCallback(async () => {\r\n    setPendingTx(true)\r\n    try {\r\n      await onReward()\r\n    } catch (error) {\r\n      // TODO: find a way to handle when the user rejects transaction or it fails\r\n    } finally {\r\n      setPendingTx(false)\r\n    }\r\n  }, [onReward])\r\n\r\n  return (\r\n    <StyledFarmStakingCard>\r\n      <CardBody>\r\n        <Heading size=\"xl\" mb=\"24px\">\r\n          {TranslateString(542, 'Farms & Staking')}\r\n        </Heading>\r\n        <CardImage src=\"/images/cake.svg\" alt=\"cake logo\" width={64} height={64} />\r\n        <Block>\r\n          <CakeHarvestBalance />\r\n          <Label>{TranslateString(544, 'CAKE to Harvest')}</Label>\r\n        </Block>\r\n        <Block>\r\n          <CakeWalletBalance />\r\n          <Label>{TranslateString(546, 'CAKE in Wallet')}</Label>\r\n        </Block>\r\n        <Actions>\r\n          {account ? (\r\n            <Button\r\n              id=\"harvest-all\"\r\n              disabled={balancesWithValue.length <= 0 || pendingTx}\r\n              onClick={harvestAllFarms}\r\n              fullWidth\r\n            >\r\n              {pendingTx\r\n                ? TranslateString(548, 'Collecting CAKE')\r\n                : TranslateString(999, `Harvest all (${balancesWithValue.length})`)}\r\n            </Button>\r\n          ) : (\r\n            <UnlockButton fullWidth />\r\n          )}\r\n        </Actions>\r\n      </CardBody>\r\n    </StyledFarmStakingCard>\r\n  )\r\n}\r\n\r\nexport default FarmedStakingCard\r\n","import React from 'react'\r\nimport { useTotalClaim } from 'hooks/useTickets'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport CardValue from './CardValue'\r\n\r\nconst CakeWinnings = () => {\r\n  const { claimAmount } = useTotalClaim()\r\n  return <CardValue value={getBalanceNumber(claimAmount)} />\r\n}\r\n\r\nexport default CakeWinnings\r\n","import React from 'react'\r\nimport { Text } from '@pancakeswap-libs/uikit'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport { useTotalRewards } from 'hooks/useTickets'\r\n\r\nconst LotteryJackpot = () => {\r\n  const lotteryPrizeAmount = useTotalRewards()\r\n\r\n  return (\r\n    <Text bold fontSize=\"24px\">\r\n      {getBalanceNumber(lotteryPrizeAmount).toLocaleString(undefined, {\r\n        maximumFractionDigits: 2,\r\n      })}\r\n    </Text>\r\n  )\r\n}\r\n\r\nexport default LotteryJackpot\r\n","import React, { useState, useCallback } from 'react'\r\nimport styled from 'styled-components'\r\nimport { Heading, Card, CardBody, Button, useModal } from '@pancakeswap-libs/uikit'\r\nimport { getCakeAddress } from 'utils/addressHelpers'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport useI18n from 'hooks/useI18n'\r\nimport useGetLotteryHasDrawn from 'hooks/useGetLotteryHasDrawn'\r\nimport useTokenBalance from 'hooks/useTokenBalance'\r\nimport { useMultiClaimLottery } from 'hooks/useBuyLottery'\r\nimport { useTotalClaim } from 'hooks/useTickets'\r\nimport BuyModal from 'views/Lottery/components/TicketCard/BuyTicketModal'\r\nimport CakeWinnings from './CakeWinnings'\r\nimport LotteryJackpot from './LotteryJackpot'\r\n\r\nconst StyledLotteryCard = styled(Card)`\r\n  background-image: url('/images/ticket-bg.svg');\r\n  background-repeat: no-repeat;\r\n  background-position: top right;\r\n  min-height: 376px;\r\n`\r\n\r\nconst Block = styled.div`\r\n  margin-bottom: 16px;\r\n`\r\n\r\nconst CardImage = styled.img`\r\n  margin-bottom: 16px;\r\n`\r\n\r\nconst Label = styled.div`\r\n  color: ${({ theme }) => theme.colors.textSubtle};\r\n  font-size: 14px;\r\n`\r\n\r\nconst Actions = styled.div`\r\n  display: flex;\r\n  margin-top: 24px;\r\n  button {\r\n    flex: 1 0 50%;\r\n  }\r\n`\r\n\r\nconst FarmedStakingCard = () => {\r\n  const lotteryHasDrawn = useGetLotteryHasDrawn()\r\n  const [requesteClaim, setRequestedClaim] = useState(false)\r\n  const TranslateString = useI18n()\r\n  const { claimAmount } = useTotalClaim()\r\n  const { onMultiClaim } = useMultiClaimLottery()\r\n  const cakeBalance = useTokenBalance(getCakeAddress())\r\n\r\n  const handleClaim = useCallback(async () => {\r\n    try {\r\n      setRequestedClaim(true)\r\n      const txHash = await onMultiClaim()\r\n      // user rejected tx or didn't go thru\r\n      if (txHash) {\r\n        setRequestedClaim(false)\r\n      }\r\n    } catch (e) {\r\n      console.error(e)\r\n    }\r\n  }, [onMultiClaim, setRequestedClaim])\r\n\r\n  const [onPresentBuy] = useModal(<BuyModal max={cakeBalance} tokenName=\"CAKE\" />)\r\n\r\n  return (\r\n    <StyledLotteryCard>\r\n      <CardBody>\r\n        <Heading size=\"xl\" mb=\"24px\">\r\n          {TranslateString(550, 'Your Lottery Winnings')}\r\n        </Heading>\r\n        <CardImage src=\"/images/ticket.svg\" alt=\"cake logo\" width={64} height={64} />\r\n        <Block>\r\n          <CakeWinnings />\r\n          <Label>{TranslateString(552, 'CAKE to Collect')}</Label>\r\n        </Block>\r\n        <Block>\r\n          <LotteryJackpot />\r\n          <Label>{TranslateString(554, 'Total jackpot this round')}</Label>\r\n        </Block>\r\n        <Actions>\r\n          <Button\r\n            id=\"dashboard-collect-winnings\"\r\n            disabled={getBalanceNumber(claimAmount) === 0 || requesteClaim}\r\n            onClick={handleClaim}\r\n            style={{ marginRight: '8px' }}\r\n          >\r\n            {TranslateString(556, 'Collect Winnings')}\r\n          </Button>\r\n          <Button id=\"dashboard-buy-tickets\" variant=\"secondary\" onClick={onPresentBuy} disabled={lotteryHasDrawn}>\r\n            {TranslateString(558, 'Buy Tickets')}\r\n          </Button>\r\n        </Actions>\r\n      </CardBody>\r\n    </StyledLotteryCard>\r\n  )\r\n}\r\n\r\nexport default FarmedStakingCard\r\n","import React from 'react'\r\nimport { Card, CardBody, Heading, Text } from '@pancakeswap-libs/uikit'\r\nimport styled from 'styled-components'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport { useTotalSupply, useBurnedBalance } from 'hooks/useTokenBalance'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { getCakeAddress } from 'utils/addressHelpers'\r\nimport CardValue from './CardValue'\r\n\r\nconst StyledCakeStats = styled(Card)`\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n`\r\n\r\nconst Row = styled.div`\r\n  align-items: center;\r\n  display: flex;\r\n  font-size: 14px;\r\n  justify-content: space-between;\r\n  margin-bottom: 8px;\r\n`\r\n\r\nconst CakeStats = () => {\r\n  const TranslateString = useI18n()\r\n  const totalSupply = useTotalSupply()\r\n  const burnedBalance = useBurnedBalance(getCakeAddress())\r\n  const cakeSupply = totalSupply ? getBalanceNumber(totalSupply) - getBalanceNumber(burnedBalance) : 0\r\n\r\n  return (\r\n    <StyledCakeStats>\r\n      <CardBody>\r\n        <Heading size=\"xl\" mb=\"24px\">\r\n          {TranslateString(534, 'Cake Stats')}\r\n        </Heading>\r\n        <Row>\r\n          <Text fontSize=\"14px\">{TranslateString(536, 'Total CAKE Supply')}</Text>\r\n          {cakeSupply && <CardValue fontSize=\"14px\" value={cakeSupply} />}\r\n        </Row>\r\n        <Row>\r\n          <Text fontSize=\"14px\">{TranslateString(538, 'Total CAKE Burned')}</Text>\r\n          <CardValue fontSize=\"14px\" value={getBalanceNumber(burnedBalance)} />\r\n        </Row>\r\n        <Row>\r\n          <Text fontSize=\"14px\">{TranslateString(540, 'New CAKE/block')}</Text>\r\n          <CardValue fontSize=\"14px\" decimals={0} value={25} />\r\n        </Row>\r\n      </CardBody>\r\n    </StyledCakeStats>\r\n  )\r\n}\r\n\r\nexport default CakeStats\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Card, CardBody, Heading, Skeleton, Text } from '@pancakeswap-libs/uikit'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { useGetStats } from 'hooks/api'\r\n\r\nconst StyledTotalValueLockedCard = styled(Card)`\r\n  align-items: center;\r\n  display: flex;\r\n  flex: 1;\r\n`\r\n\r\nconst TotalValueLockedCard = () => {\r\n  const TranslateString = useI18n()\r\n  const data = useGetStats()\r\n  const tvl = data ? data.total_value_locked_all.toLocaleString('en-US', { maximumFractionDigits: 0 }) : null\r\n\r\n  return (\r\n    <StyledTotalValueLockedCard>\r\n      <CardBody>\r\n        <Heading size=\"lg\" mb=\"24px\">\r\n          {TranslateString(999, 'Total Value Locked (TVL)')}\r\n        </Heading>\r\n        {data ? (\r\n          <>\r\n            <Heading size=\"xl\">{`$${tvl}`}</Heading>\r\n            <Text color=\"textSubtle\">{TranslateString(999, 'Across all LPs and Syrup Pools')}</Text>\r\n          </>\r\n        ) : (\r\n          <>\r\n            <Skeleton height={66} />\r\n          </>\r\n        )}\r\n      </CardBody>\r\n    </StyledTotalValueLockedCard>\r\n  )\r\n}\r\n\r\nexport default TotalValueLockedCard\r\n","import { useEffect, useState } from 'react'\r\n\r\n/*\r\n * Due to Cors the api was forked and a proxy was created\r\n * @see https://github.com/pancakeswap/gatsby-pancake-api/commit/e811b67a43ccc41edd4a0fa1ee704b2f510aa0ba\r\n */\r\nexport const baseUrl = 'https://api.pancakeswap.com/api/v1'\r\n\r\n/* eslint-disable camelcase */\r\n\r\nexport interface TradePair {\r\n  swap_pair_contract: string\r\n  base_symbol: string\r\n  quote_symbol: string\r\n  last_price: number\r\n  base_volume_24_h: number\r\n  quote_volume_24_h: number\r\n}\r\n\r\nexport interface ApiStatResponse {\r\n  update_at: string\r\n  '24h_total_volume': number\r\n  total_value_locked: number\r\n  total_value_locked_all: number\r\n  trade_pairs: {\r\n    [key: string]: TradePair\r\n  }\r\n}\r\n\r\nexport const useGetStats = () => {\r\n  const [data, setData] = useState<ApiStatResponse | null>(null)\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        const response = await fetch(`${baseUrl}/stat`)\r\n        const responsedata: ApiStatResponse = await response.json()\r\n\r\n        setData(responsedata)\r\n      } catch (error) {\r\n        console.error('Unable to fetch data:', error)\r\n      }\r\n    }\r\n\r\n    fetchData()\r\n  }, [setData])\r\n\r\n  return data\r\n}\r\n","import React, { useCallback, useRef } from 'react'\r\nimport styled from 'styled-components'\r\nimport { Heading, Card, CardBody, Flex, ArrowForwardIcon, Skeleton } from '@pancakeswap-libs/uikit'\r\nimport { NavLink } from 'react-router-dom'\r\nimport useI18n from 'hooks/useI18n'\r\nimport BigNumber from 'bignumber.js'\r\nimport { QuoteToken } from 'config/constants/types'\r\nimport { useFarms, usePriceBnbBusd } from 'state/hooks'\r\nimport { BLOCKS_PER_YEAR, CAKE_PER_BLOCK, CAKE_POOL_PID } from 'config'\r\n\r\nconst StyledFarmStakingCard = styled(Card)`\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n  width: 100%;\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    margin: 0;\r\n    max-width: none;\r\n  }\r\n`\r\nconst CardMidContent = styled(Heading).attrs({ size: 'xl' })`\r\n  line-height: 44px;\r\n`\r\nconst EarnAPYCard = () => {\r\n  const TranslateString = useI18n()\r\n  const farmsLP = useFarms()\r\n  const bnbPrice = usePriceBnbBusd()\r\n\r\n  const maxAPY = useRef(Number.MIN_VALUE)\r\n\r\n  const getHighestAPY = () => {\r\n    const activeFarms = farmsLP.filter((farm) => farm.pid !== 0 && farm.multiplier !== '0X')\r\n\r\n    calculateAPY(activeFarms)\r\n\r\n    return (maxAPY.current * 100).toLocaleString('en-US').slice(0, -1)\r\n  }\r\n\r\n  const calculateAPY = useCallback(\r\n    (farmsToDisplay) => {\r\n      const cakePriceVsBNB = new BigNumber(farmsLP.find((farm) => farm.pid === CAKE_POOL_PID)?.tokenPriceVsQuote || 0)\r\n\r\n      farmsToDisplay.map((farm) => {\r\n        if (!farm.tokenAmount || !farm.lpTotalInQuoteToken || !farm.lpTotalInQuoteToken) {\r\n          return farm\r\n        }\r\n        const cakeRewardPerBlock = CAKE_PER_BLOCK.times(farm.poolWeight)\r\n        const cakeRewardPerYear = cakeRewardPerBlock.times(BLOCKS_PER_YEAR)\r\n\r\n        let apy = cakePriceVsBNB.times(cakeRewardPerYear).div(farm.lpTotalInQuoteToken)\r\n\r\n        if (farm.quoteTokenSymbol === QuoteToken.BUSD) {\r\n          apy = cakePriceVsBNB.times(cakeRewardPerYear).div(farm.lpTotalInQuoteToken).times(bnbPrice)\r\n        } else if (farm.quoteTokenSymbol === QuoteToken.CAKE) {\r\n          apy = cakeRewardPerYear.div(farm.lpTotalInQuoteToken)\r\n        } else if (farm.dual) {\r\n          const cakeApy =\r\n            farm && cakePriceVsBNB.times(cakeRewardPerBlock).times(BLOCKS_PER_YEAR).div(farm.lpTotalInQuoteToken)\r\n          const dualApy =\r\n            farm.tokenPriceVsQuote &&\r\n            new BigNumber(farm.tokenPriceVsQuote)\r\n              .times(farm.dual.rewardPerBlock)\r\n              .times(BLOCKS_PER_YEAR)\r\n              .div(farm.lpTotalInQuoteToken)\r\n\r\n          apy = cakeApy && dualApy && cakeApy.plus(dualApy)\r\n        }\r\n\r\n        if (maxAPY.current < apy.toNumber()) maxAPY.current = apy.toNumber()\r\n\r\n        return apy\r\n      })\r\n    },\r\n    [bnbPrice, farmsLP],\r\n  )\r\n\r\n  return (\r\n    <StyledFarmStakingCard>\r\n      <CardBody>\r\n        <Heading color=\"contrast\" size=\"lg\">\r\n          Earn up to\r\n        </Heading>\r\n        <CardMidContent color=\"#7645d9\">\r\n          {getHighestAPY() ? (\r\n            `${getHighestAPY()}% ${TranslateString(736, 'APR')}`\r\n          ) : (\r\n            <Skeleton animation=\"pulse\" variant=\"rect\" height=\"44px\" />\r\n          )}\r\n        </CardMidContent>\r\n        <Flex justifyContent=\"space-between\">\r\n          <Heading color=\"contrast\" size=\"lg\">\r\n            in Farms\r\n          </Heading>\r\n          <NavLink exact activeClassName=\"active\" to=\"/farms\">\r\n            <ArrowForwardIcon mt={30} color=\"primary\" />\r\n          </NavLink>\r\n        </Flex>\r\n      </CardBody>\r\n    </StyledFarmStakingCard>\r\n  )\r\n}\r\n\r\nexport default EarnAPYCard\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport orderBy from 'lodash/orderBy'\r\nimport { Heading, Card, CardBody, Flex, ArrowForwardIcon } from '@pancakeswap-libs/uikit'\r\nimport { NavLink } from 'react-router-dom'\r\nimport pools from 'config/constants/pools'\r\nimport { Pool } from 'state/types'\r\n\r\nconst StyledFarmStakingCard = styled(Card)`\r\n  background: linear-gradient(#53dee9, #7645d9);\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n  width: 100%;\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    margin: 0;\r\n    max-width: none;\r\n  }\r\n`\r\nconst CardMidContent = styled(Heading).attrs({ size: 'xl' })`\r\n  line-height: 44px;\r\n`\r\nconst EarnAssetCard = () => {\r\n  const latestPools: Pool[] = orderBy(pools, ['sortOrder', 'pid'], ['desc', 'desc']).slice(0, 3)\r\n\r\n  // Always include CAKE\r\n  const assets = ['CAKE', ...latestPools.map((pool) => pool.tokenName)].join(', ')\r\n\r\n  return (\r\n    <StyledFarmStakingCard>\r\n      <CardBody>\r\n        <Heading color=\"contrast\" size=\"lg\">\r\n          Earn\r\n        </Heading>\r\n        <CardMidContent color=\"invertedContrast\">{assets}</CardMidContent>\r\n        <Flex justifyContent=\"space-between\">\r\n          <Heading color=\"contrast\" size=\"lg\">\r\n            in Pools\r\n          </Heading>\r\n          <NavLink exact activeClassName=\"active\" to=\"/syrup\">\r\n            <ArrowForwardIcon mt={30} color=\"primary\" />\r\n          </NavLink>\r\n        </Flex>\r\n      </CardBody>\r\n    </StyledFarmStakingCard>\r\n  )\r\n}\r\n\r\nexport default EarnAssetCard\r\n","import { usePriceCakeBusd } from 'state/hooks'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport { useTotalRewards } from './useTickets'\r\n\r\nconst useLotteryTotalPrizesUsd = () => {\r\n  const totalRewards = useTotalRewards()\r\n  const totalCake = getBalanceNumber(totalRewards)\r\n  const cakePriceBusd = usePriceCakeBusd()\r\n\r\n  return totalCake * cakePriceBusd.toNumber()\r\n}\r\n\r\nexport default useLotteryTotalPrizesUsd\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Heading, Card, CardBody, Flex, ArrowForwardIcon } from '@pancakeswap-libs/uikit'\r\nimport { NavLink } from 'react-router-dom'\r\nimport useLotteryTotalPrizesUsd from 'hooks/useLotteryTotalPrizesUsd'\r\n\r\nconst StyledFarmStakingCard = styled(Card)`\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n  width: 100%;\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    margin: 0;\r\n    max-width: none;\r\n  }\r\n`\r\nconst CardMidContent = styled(Heading).attrs({ size: 'xl' })`\r\n  line-height: 44px;\r\n`\r\nconst WinCard = () => {\r\n  const lotteryPrize = Math.round(useLotteryTotalPrizesUsd()).toLocaleString()\r\n\r\n  return (\r\n    <StyledFarmStakingCard>\r\n      <CardBody>\r\n        <Heading color=\"contrast\" size=\"lg\">\r\n          Lottery with\r\n        </Heading>\r\n        <CardMidContent color=\"#7645d9\">${lotteryPrize}</CardMidContent>\r\n        <Flex justifyContent=\"space-between\">\r\n          <Heading color=\"contrast\" size=\"lg\">\r\n            up for grabs\r\n          </Heading>\r\n          <NavLink exact activeClassName=\"active\" to=\"/lottery\">\r\n            <ArrowForwardIcon mt={30} color=\"primary\" />\r\n          </NavLink>\r\n        </Flex>\r\n      </CardBody>\r\n    </StyledFarmStakingCard>\r\n  )\r\n}\r\n\r\nexport default WinCard\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Heading, Text, BaseLayout } from '@pancakeswap-libs/uikit'\r\nimport useI18n from 'hooks/useI18n'\r\nimport Page from 'components/layout/Page'\r\nimport FarmStakingCard from 'views/Home/components/FarmStakingCard'\r\nimport LotteryCard from 'views/Home/components/LotteryCard'\r\nimport CakeStats from 'views/Home/components/CakeStats'\r\nimport TotalValueLockedCard from 'views/Home/components/TotalValueLockedCard'\r\nimport EarnAPYCard from 'views/Home/components/EarnAPYCard'\r\nimport EarnAssetCard from 'views/Home/components/EarnAssetCard'\r\nimport WinCard from 'views/Home/components/WinCard'\r\n\r\nconst Hero = styled.div`\r\n  align-items: center;\r\n  background-image: url('/images/pan-bg-mobile.svg');\r\n  background-repeat: no-repeat;\r\n  background-position: top center;\r\n  display: flex;\r\n  justify-content: center;\r\n  flex-direction: column;\r\n  margin: auto;\r\n  margin-bottom: 32px;\r\n  padding-top: 116px;\r\n  text-align: center;\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    background-image: url('/images/pan-bg2.svg'), url('/images/pan-bg.svg');\r\n    background-position: left center, right center;\r\n    height: 165px;\r\n    padding-top: 0;\r\n  }\r\n`\r\n\r\nconst Cards = styled(BaseLayout)`\r\n  align-items: stretch;\r\n  justify-content: stretch;\r\n  margin-bottom: 32px;\r\n\r\n  & > div {\r\n    grid-column: span 6;\r\n    width: 100%;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    & > div {\r\n      grid-column: span 8;\r\n    }\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    & > div {\r\n      grid-column: span 6;\r\n    }\r\n  }\r\n`\r\n\r\nconst CTACards = styled(BaseLayout)`\r\n  align-items: start;\r\n  margin-bottom: 32px;\r\n\r\n  & > div {\r\n    grid-column: span 6;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    & > div {\r\n      grid-column: span 8;\r\n    }\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    & > div {\r\n      grid-column: span 4;\r\n    }\r\n  }\r\n`\r\n\r\nconst Home: React.FC = () => {\r\n  const TranslateString = useI18n()\r\n\r\n  return (\r\n    <Page>\r\n      <Hero>\r\n        <Heading as=\"h1\" size=\"xl\" mb=\"24px\" color=\"secondary\">\r\n          {TranslateString(576, 'ProvethSwap')}\r\n        </Heading>\r\n        <Text>{TranslateString(578, 'The #1 AMM and yield farm on Binance Smart Chain.')}</Text>\r\n      </Hero>\r\n      <div>\r\n        <Cards>\r\n          <FarmStakingCard />\r\n          <LotteryCard />\r\n        </Cards>\r\n        <CTACards>\r\n          <EarnAPYCard />\r\n          <EarnAssetCard />\r\n          <WinCard />\r\n        </CTACards>\r\n        <Cards>\r\n          <CakeStats />\r\n          <TotalValueLockedCard />\r\n        </Cards>\r\n      </div>\r\n    </Page>\r\n  )\r\n}\r\n\r\nexport default Home\r\n"],"sourceRoot":""}